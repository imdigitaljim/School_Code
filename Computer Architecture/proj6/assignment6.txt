CDA3101 - Spring 2015
Assignment 6
Data Cache Simulator
Objectives. Learn how data references are stored and accessed in a data cache.
Your assignment is to write a program that simulates the behavior of a data cache. The program will read a
trace of references from standard input and produce statistics about the trace to standard output. The cache simulator
should first determine the configuration of the data cache. This is accomplished by reading the configuration
information from a trace.config file in the current directory. These lines in this file specify the number of cache sets,
the number of lines within each set (associativity level), and the size of a cache line in bytes. The format of the configuration
information is shown below (note that the value specified after the colon on each line is the portion that
can change). You may assume that the number of sets does not exceed 8192 and the associativity level does not
exceed 8. You can also assume that the number of sets and line size is a power of two and the line size is greater
than or equal to 8 bytes. You may also assume that the format and numbers specified in these three lines are valid.
Number of sets: 8
Set size: 1
Line size: 8
The trace of references follow the configuration information and has the following format:
<accesstype>:<size>:<hexaddress>
where <accesstype> can be the characters:
R-indicates a read access
W-indicates a write access
<size> is the size of the reference in bytes, and <hexaddress> is the starting byte address of the reference expressed
as a hexadecimal number. You may assume that the format and addresses in the trace of references are valid. You
should check that the size of each data reference is 1, 2, 4, or 8 bytes. You should also check if each reference’s
address is properly aligned. If the data reference size or alignment is not correct, then print a warning message to
stderr and ignore the reference. I hav e provided an example trace of references below, containing the addresses that
correspond to the example references described on page 386 of your text (note the addresses below are hexadecimal
byte addresses rather than decimal block addresses shown in the text).
R:4:b0
R:4:d0
R:4:b0
R:4:d0
R:4:80
R:4:18
R:4:80
R:4:90
R:4:80
The cache configuration information for this example is available in the file ˜whalley/cda3101exec/trace.config and
the trace data is available in the file ˜whalley/cda3101exec/trace.dat on linprog. You can read the <accesstype>,
<size>, and <hexaddress> into a character and two integers, respectively, using formatted I/O with the following
type of scanf statement.
scanf("%c:%d:%x", &accesstypevariable, &sizevariable, &hexaddressvariable);
Your cache simulator should use an LRU replacement algorithm. For data writes, it should employawriteback
and write-allocate policy. The cache simulator output should first print information about the cache configurations
used. Next, it should print information for each reference. This information is the reference number, access
type (read or write), address, tag, index, offset, result (hit or miss), and the number of memory references (copies of
-1-
he cache line to/from memory) caused by the reference (0, 1, or 2). Note that the address and the tag should be
printed in hexadecimal. The index and offset should be printed in decimal. This information will help you debug
problems with your simulator. Though it is not required, you may also wish to write a function to dump the state of
the caches to help debug problems. After the last reference the cache simulator should output the following summary
information:
a. the number of hits
b. the number of misses
c. total accesses to the cache
d. hit ratio
e. miss ratio
The output below and the file ˜whalley/cda3101exec/trace.stats contains the output of my cache simulator after processing
only the references in the trace file ˜whalley/cda3101exec/trace.dat.
Cache Configuration
8 1-way set associative entries
of line size 8 bytes
Results for Each Reference
Ref Access Address Tag Index Offset Result Memrefs
---- ------ -------- ------- ----- ------ ------ -------
1 read b0 2 6 0 miss 1
2 read d0 3 2 0 miss 1
3 read b0 2 6 0 hit 0
4 read d0 3 2 0 hit 0
5 read 80 2 0 0 miss 1
6 read 18 0 3 0 miss 1
7 read 80 2 0 0 hit 0
8 read 90 2 2 0 miss 1
9 read 80 2 0 0 hit 0
Simulation Summary Statistics
-----------------------------
Total hits : 4
Total misses : 5
Total accesses : 9
Hit ratio : 0.444444
Miss ratio : 0.555556
You can invoke an executable I have provided at ˜whalley/cda3101exec/datacache.exe to check that your output is
correct. For instance, you could use the following command on linprog to run my executable if the name of the
input file is trace.dat and the name of the output file is to be trace.stats.
˜whalley/cda3101exec/datacache.exe < trace.dat > trace.stats
You should make your output match mine exactly to facilitate grading of the assignment.
-2-
ou should use good programming style, which includes descriptive variable names, abstraction, consistent
and readable indentation, and comments. You should comment your program so that others (e.g. the grader) can
understand it. You should place comments before each function and each major block of code. You should also
have comments at the top of the file indicating your name, this course, the assignment, and the command used to
compile your program. For example:
/***********************************************************
* *
* Name: Joe Shmoe *
* Class: CDA3101 *
* Assignment: Implementing a Data Cache Simulator *
* Compile: "gcc -g -o datacache datacache.c" *
* *
***********************************************************/
The solution for your assignment should be written in a programming language that can be successfully compiled
and executed on linprog. You should submit this assignment as a single file (e.g. datacache.c) attachment in an email
message to your TA for your recitation section (kiswani@cs.fsu.edu or yannes@cs.fsu.edu). Do not attach a zip
file as some e-mail servers will filter a message with a zip file as spam. The assignment is due before the beginning
of class on April 14.