===================================
Problem statement:
===================================
Design and implement a simple, user-space, shell-like utility
that is capable of interpreting a FAT32 file system image.  The
program must understand the basic commands to manipulate the
given file system image.  The utility must not corrupt the file
system image and should be robust.  We may not reuse kernel file
system code, and we may not copy any code from other utilities
(or from anywhere else on the internet).
===================================
Program Details:
===================================
fat32.img is required to be in the CWD of the mutil

Commands:

open - opens a file in a r, w, wr mode from the CWD "open <FILE_NAME> <MODE>"
close - closes an open file from the CWD "close <FILE_NAME>"
create - create an empty file in the CWD "create <FILE_NAME>"
rm - removes a file from the CWD, closes it if opened "rm <FILE_NAME>"
rmdir - removes an empty directory from the CWD, "rmdir <DIR_NAME>"
mkdir - creates an empty directory in the CWD "mkdir <DIR_NAME>"
read - reads a specified amount of bytes from an open file in read/rw 
	mode from the CWD "read <FILE_NAME> <START_POSITION> <NUMBYTES>"
write - write a string at start position for a specified number of bytes
	to an open file in write/rw mode from the CWD "write <FILE_NAME> <START_POSITION> <NUMBYTES> <STRING>"
size - outputs the size of a file in the CWD "size <FILE_NAME>"
cd - changes the directory to a new directory from the CWD "cd <DIR_NAME>"
ls - list the contents (short directory entry) from the CWD or a specified directory "ls" or "ls <DIR_NAME>"
exit - exit the program "exit"

This program is a utility for operating in a FAT32 image. Once compiled, use "mutil" to begin the program starting
at the root directory with a ']' prompt i.e. /] 

Notable Data Structures: (located in the header.)
BootSector] is a allocated memory unit we use to collect the initial 512bytes.
DirEntry] we keep an array of entries for each cluster
FSInfo] keeps the reserved FSinfo so it can be kept up to date such as next free cluster and cluster free count.
OpenFile] we use an open file array to track available open files.

Limits:
user input MAXLENGTH is 512bytes with a maximum of 512 different parameters
maximum CWD depth is 511 from the root
maximum open files is 512

===================================
Steps taken to solve the problem
===================================
1. Implemented a simple function to convert strings of bytes
   between big-endian formatting and little-endian formatting.
   Served as an exercise to demonstrate formatting differences.
2. Implemented the basic framework for the utility, accepting
   user input and properly interpreting it.
3. Implemented complete parsing of directory information.
4. Began implementation of ls command.
5. Implemented size command.
6. Implemented cd command.
7. Completed ls command (allowing it to work on directories
   other than the current working directory).
8. Implemented open and close commands.
9. Implemented read command.
10.Implemented create command.
11.Implemented rm and rmdir commands.
12.Implemented mkdir and write commands.
13.Fixed cluster selection bug.
14.Completed final touches (debugging/cleaning up code).
===================================
Assumptions
===================================
-fat32.img is required to be in the CWD of the mutil, there was no specification
  around the handling of this
-long-directory names are not dealt with
 in any way (they are only identified)
-file and directory names do not contain spaces
-file names and directories will only be manipulated
 in the current directory (no pathname operations
 are supported)
-if files are open in the CWD and the cd command changes the CWD
 all files are closed upon moving to the next directory.
-for the write command, the string to be written
 will always begin and end with quotes
-if a file is open and you try to open with another mode it will
succesfully change modes
-reading non-txt files binary only does ascii conversion
-files and directories created have no metadata about 
their creation - not part of the specification,
ie time created, last modified, etc., super easy to implement
based on the current design.

===================================
System call libraries
===================================
stdio.h
stdlib.h
string.h
===================================
Problems
===================================
-understanding how to read/traverse
 the FAT table proved tricky
===================================
Known bugs
===================================



===================================
To do
==================================
-further optimization and debugging
===================================
Division of Labor
===================================
Jim Bach
-user input processing
-built-in command implementaton
-overall design
-testing and debugging
Matthew Harrison
-report.txt and README
-testing and debugging
-design
Robert Tuttle
-testing and debugging
===================================
*************Slack Days Used*****************************************************
===================================
3 days for Jim Bach
3 days for Matthew Harrison
3 days for Robert Tuttle
===================================
Log
===================================
12/6/15
-implemented mkdir and write commands
-fixed cluster selection bug which made file sizes
 too large
-completed debugging

12/5/15
-completed implementation of read-only commands
-implemented create command
-implemented rm and rmdir commands

12/4/15
-implemented finalized reading of directory information
-implemented ls command
-implemented size command
-implemented cd command

12/3/15
-implemented partial reading of directory information
-finalized reading of boot-sector information

11/18/15
-implemented functionality to partially read boot-sector
 information

11/16/15
-implemented basic framework for reading user input

11/08/15
-implemented function which converts between big-endian
 formatting and little-endian formatting (as an exercise
 to better understand the differences between the formats)

===================================
Additional Features
===================================

exit - exit the program "exit"